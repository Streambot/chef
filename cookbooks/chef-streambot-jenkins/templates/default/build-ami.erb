#!/bin/bash

################################################################################
# This software is licensed under the MIT License (MIT)
#
# Copyright (c) 2013 Martin Biermann
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
################################################################################

set -e
set -x

function usage {
  echo "Usage: `pwd`/build-ami (options)"
  echo "Requires the 'BUILD_TAG' environment variable to be set."
  printf "%s %30s\n" "-b, --git-branch" "GIT_BRANCH"
  printf "%s %30s\n" "-p, --key-pair" "KEY_PAIR"
  printf "%s %30s\n" "-d, --key-pair-name" "KEY_PAIR_NAME"
  printf "%s %30s\n" "-n, --instance-name" "INSTANCE_NAME"
  printf "%s %30s\n" "-i, --instance-type" "INSTANCE_TYPE"
  printf "%s %30s\n" "-s, --subnet-id" "SUBNET"
  printf "%s %30s\n" "-g, --security-group-id" "SG_ID"
  printf "%s %30s\n" "-a, --ami-id" "AMI_ID"
  printf "%s %30s\n" "-r, --region" "REGION"
  printf "%s %30s\n" "-e, --chef-env" "CHEF_ENV"
  printf "%s %30s\n" "-g, --chef-git" "CHEF_GIT"
  printf "%s %30s\n" "-x, --chef-role" "CHEF_ROLE"
}

################################################################################
# 0 - Setup working directory, so concurrent runs cannot interfere
################################################################################

[ "$BUILD_TAG" = "" ] && usage && exit 1
CWD="`pwd`/`echo $BUILD_TAG | sed 's/\ /_/g'`"
mkdir -p "$CWD"
cd "$CWD"

################################################################################
# 1 - Download deployment repository
################################################################################

TOOL_DIR="$CWD/`echo "<%= @deployment_repo %>" | sed 's/.*\/\([^\/\.]*\)\.git/\1/g'`"
git clone <%= @deployment_repo %>
cd "$TOOL_DIR"
# Its safe to call the submodule commands here
# even if the repos does not have any of these.
git submodule init
git submodule update

################################################################################
# 2 - Run create_ami.sh script using predefined variables
################################################################################

# Note that there are pre-defined arguments. By implicit knowledge about the 
# create_ami.sh script it is known, that the processing of arguments follows 
# the order of their appending. Thus any actual arguments given to this 
# script and that are appended by '"$@"' will override any pre-defined value.

./create_ami.sh \
--key-pair <%= @aws.keypair.file %> \
--key-pair-name <%= @aws.keypair.name %> \
--ami-id <%= @aws.base_ami %> \
--chef-git <%= @chef_repo.url %> \
--git-branch <%= @chef_repo.branch %> \
"$@"

################################################################################
# Clean-up
################################################################################

function clean_up {
  # Remove the working directory
  rm -rf "$CWD"
}

# On ir-/regular exit, invoke clean up
trap '{ clean_up; }' EXIT SIGINT SIGTERM